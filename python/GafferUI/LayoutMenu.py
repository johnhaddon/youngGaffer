import os
import re

import IECore

import GafferUI

## Appends a submenu of the given name to the specified IECore.MenuDefinition. The submenu
# contains commands to facilitate the administration of different UI layouts.
def appendDefinitions( menuDefinition, name="" ) :

	menuDefinition.append( name, { "subMenu" : __layoutMenu } )

## A function suitable as the command for a Layout/Name menu item which restores a named layout.
# It must be invoked from a menu which has a ScriptWindow in its ancestry. 
def restore( menu, name ) :
	
	scriptWindow = menu.ancestor( GafferUI.ScriptWindow )	
	layout = GafferUI.Layouts.create( name )
		
	scriptWindow.setLayout( layout )

## A function suitable as the command for a Layout/Delete/LayoutName menu item.
def delete( name ) :
	
	GafferUI.Layouts.remove( name )
	__saveLayouts()
			
## A function suitable as the command for a Layout/Save... menu item. It must be invoked from
# a menu which has a ScriptWindow in its ancestry. 
def save( menu ) :

	layoutNames = GafferUI.Layouts.names()
	i = 1
	while True :
		layoutName = "Layout " + str( i )
		i += 1
		if "user:" + layoutName not in layoutNames :
			break  

	d = GafferUI.TextInputDialogue( initialText=layoutName, title="Save Layout", confirmLabel="Save" )
	t = d.waitForText()
	d.hide()
	
	if t is None :
		return

	scriptWindow = menu.ancestor( GafferUI.ScriptWindow )	
	layout = scriptWindow.getLayout()
	
	GafferUI.Layouts.add( "user:" + t, layout )
	
	__saveLayouts()
	
def __saveLayouts() :

	## \todo This location should include a major version number, and should be accessible
	# in a central place for all other code to use
	uiStartupDir = os.path.expanduser( "~/gaffer/startup/ui" )
	if not os.path.isdir( uiStartupDir ) :
		os.makedirs( uiStartupDir )

	f = open( os.path.join( uiStartupDir, "layouts.py" ), "w" )
	f.write( "# This file was automatically generated by Gaffer.\n" )
	f.write( "# Do not edit this file - it will be overwritten.\n\n" )
	f.write( "import GafferUI\n\n" )
	
	GafferUI.Layouts.save( f, re.compile( "user:.*" ) )
	
def __layoutMenu() :

	menuDefinition = IECore.MenuDefinition()
	
	layoutNames = GafferUI.Layouts.names()
	
	if layoutNames :
		
		def restoreWrapper( name ) :
		
			return lambda menu : restore( menu, name )
		
		for name in layoutNames :
		
			label = name
			if label.startswith( "user:" ) :
				label = label[5:]
					
			menuDefinition.append( label, { "command" : restoreWrapper( name ) } )			
	
		menuDefinition.append( "/SetDivider", { "divider" : True } )

	def deleteWrapper( name ) :
		
		return lambda : delete( name )

	for name in layoutNames :
	
		if name.startswith( "user:" ) :
			
			menuDefinition.append( "/Delete/%s" % name[5:], { "command" : deleteWrapper( name ) } )

	menuDefinition.append( "/Save...", { "command" : save } )
	
	return menuDefinition
